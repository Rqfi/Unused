import android.app.Activity
import android.content.Context
import android.content.Intent
import android.widget.Toast
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.switchMap
import androidx.lifecycle.viewModelScope
import com.example.projectapp.data.remote.data.login.LoginResponses
import com.example.projectapp.data.repository.login.GetLoginResult
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import com.example.projectapp.data.repository.login.LoginRepository
import com.example.projectapp.ui.MainActivity
import kotlinx.coroutines.launch

@HiltViewModel
class LoginViewModel @Inject constructor(
    private val loginRepository: LoginRepository
) : ViewModel() {
    private val getLoginResult = MutableLiveData<GetLoginResult>()
    val getLoginError = getLoginResult.switchMap { it.error }
    val getLoginLoading = getLoginResult.switchMap { it.loading }
    val loginForm = getLoginResult.switchMap { it.loginForm }
    fun login(context: Context, email: String, password: String) {
        viewModelScope.launch {
            val result = loginRepository.getLogin(context, email, password)
            getLoginResult.postValue(result)
        }
    }

    fun handleSuccessfulLogin(loginResponses: LoginResponses, context: Context) {
        val status = loginResponses.status
        val message = loginResponses.message
        val token = loginResponses.token

        when (status) {
            "Success" -> {
                val welcomeMessage = "Selamat, $message"
                showToast(context, welcomeMessage)

                val intent = Intent(context, MainActivity::class.java)
                context.startActivity(intent)

                if (context is Activity) {
                    context.finish()
                }
            }

            "error" -> {
                when (message) {
                    "Username atau password salah" -> {
                        showToast(context, "Login failed: Username atau password salah")
                    }

                    "Access Denied!. Anda tidak memiliki izin untuk login" -> {
                        showToast(context, "Login failed: Access Denied!")
                    }

                    "Akun Anda belum diaktivasi. Silahkan aktivasi terlebih dahulu." -> {
                        showToast(context, "Login failed: Akun belum diaktivasi")
                    }

                    else -> {
                        showToast(context, "Login failed: $message")
                    }
                }
            }
        }
    }

    private fun showToast(context: Context, message: String) {
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
    }
}